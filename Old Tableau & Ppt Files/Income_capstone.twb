<?xml version='1.0' encoding='utf-8' ?>

<!-- build 20222.22.0812.0353                               -->
<workbook original-version='18.1' source-build='2022.2.1 (20222.22.0812.0353)' source-platform='win' version='18.1' xmlns:user='http://www.tableausoftware.com/xml/user'>
  <document-format-change-manifest>
    <_.fcp.AnimationOnByDefault.true...AnimationOnByDefault />
    <_.fcp.MarkAnimation.true...MarkAnimation />
    <_.fcp.ObjectModelEncapsulateLegacy.true...ObjectModelEncapsulateLegacy />
    <_.fcp.ObjectModelTableType.true...ObjectModelTableType />
    <_.fcp.SchemaViewerObjectModel.true...SchemaViewerObjectModel />
    <SheetIdentifierTracking />
    <SortTagCleanup />
    <WindowsPersistSimpleIdentifiers />
  </document-format-change-manifest>
  <preferences>
    <preference name='ui.encoding.shelf.height' value='24' />
    <preference name='ui.shelf.height' value='26' />
  </preferences>
  <_.fcp.AnimationOnByDefault.false...style>
    <_.fcp.AnimationOnByDefault.false..._.fcp.MarkAnimation.true...style-rule element='animation'>
      <_.fcp.AnimationOnByDefault.false...format attr='animation-on' value='ao-on' />
    </_.fcp.AnimationOnByDefault.false..._.fcp.MarkAnimation.true...style-rule>
  </_.fcp.AnimationOnByDefault.false...style>
  <datasources>
    <datasource caption='new_capstone' inline='true' name='federated.17qsjmp0vxkl2s1ecz8ay1iq3y3d' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='new_capstone' name='textscan.0c8qoql0r6o6yr14tcv5w1ulznmk'>
            <connection class='textclean' cleaning='yes' compat='no' csvFile='C:/Users/aaust/OneDrive/Desktop/DA7/Projects/Capstone/notebooks/new_capstone.csv' dataRefreshTime='' directory='C:/Users/aaust/OneDrive/Desktop/DA7/Projects/Capstone/notebooks' filename='C:/Users/aaust/AppData/Local/Temp/TableauTemp/157yp230rfx20e119u6ie1qiny7y/new_capstone.csv.xlsx' interpretationMode='8' password='' server='' validate='no' />
          </named-connection>
        </named-connections>
        <_.fcp.ObjectModelEncapsulateLegacy.false...relation connection='textscan.0c8qoql0r6o6yr14tcv5w1ulznmk' name='new_capstone.csv' table='[new_capstone#csv$]' type='table'>
          <columns character-set='UTF-8' gridOrigin='A1:P96:no:A1:P96:1' header='yes' locale='en_US' separator=','>
            <column datatype='integer' name='F1' ordinal='0' />
            <column datatype='string' name='county' ordinal='1' />
            <column datatype='integer' name='(&apos;less than $10,000&apos;, &apos;sum&apos;)' ordinal='2' />
            <column datatype='integer' name='(&apos;income_$10,000 to $14,999&apos;, &apos;sum&apos;)' ordinal='3' />
            <column datatype='integer' name='(&apos;income_$15,000 to $24,999&apos;, &apos;sum&apos;)' ordinal='4' />
            <column datatype='integer' name='(&apos;income_$25,000 to $34,999&apos;, &apos;sum&apos;)' ordinal='5' />
            <column datatype='integer' name='(&apos;income_$35,000 to $49,999&apos;, &apos;sum&apos;)' ordinal='6' />
            <column datatype='integer' name='(&apos;income_$50,000 to $74,999&apos;, &apos;sum&apos;)' ordinal='7' />
            <column datatype='integer' name='(&apos;income_$75,000 to $99,999&apos;, &apos;sum&apos;)' ordinal='8' />
            <column datatype='integer' name='(&apos;income_$100,000 to $149,999&apos;, &apos;sum&apos;)' ordinal='9' />
            <column datatype='integer' name='(&apos;income_$150,000 to $199,999&apos;, &apos;sum&apos;)' ordinal='10' />
            <column datatype='integer' name='(&apos;income_$200,000 or more&apos;, &apos;sum&apos;)' ordinal='11' />
            <column datatype='integer' name='(&apos;insured_female&apos;, &apos;sum&apos;)' ordinal='12' />
            <column datatype='integer' name='(&apos;uninsured_female&apos;, &apos;sum&apos;)' ordinal='13' />
            <column datatype='real' name='death_rate' ordinal='14' />
            <column datatype='string' name='race' ordinal='15' />
          </columns>
        </_.fcp.ObjectModelEncapsulateLegacy.false...relation>
        <_.fcp.ObjectModelEncapsulateLegacy.true...relation connection='textscan.0c8qoql0r6o6yr14tcv5w1ulznmk' name='new_capstone.csv' table='[new_capstone#csv$]' type='table'>
          <columns character-set='UTF-8' gridOrigin='A1:P96:no:A1:P96:1' header='yes' locale='en_US' separator=','>
            <column datatype='integer' name='F1' ordinal='0' />
            <column datatype='string' name='county' ordinal='1' />
            <column datatype='integer' name='(&apos;less than $10,000&apos;, &apos;sum&apos;)' ordinal='2' />
            <column datatype='integer' name='(&apos;income_$10,000 to $14,999&apos;, &apos;sum&apos;)' ordinal='3' />
            <column datatype='integer' name='(&apos;income_$15,000 to $24,999&apos;, &apos;sum&apos;)' ordinal='4' />
            <column datatype='integer' name='(&apos;income_$25,000 to $34,999&apos;, &apos;sum&apos;)' ordinal='5' />
            <column datatype='integer' name='(&apos;income_$35,000 to $49,999&apos;, &apos;sum&apos;)' ordinal='6' />
            <column datatype='integer' name='(&apos;income_$50,000 to $74,999&apos;, &apos;sum&apos;)' ordinal='7' />
            <column datatype='integer' name='(&apos;income_$75,000 to $99,999&apos;, &apos;sum&apos;)' ordinal='8' />
            <column datatype='integer' name='(&apos;income_$100,000 to $149,999&apos;, &apos;sum&apos;)' ordinal='9' />
            <column datatype='integer' name='(&apos;income_$150,000 to $199,999&apos;, &apos;sum&apos;)' ordinal='10' />
            <column datatype='integer' name='(&apos;income_$200,000 or more&apos;, &apos;sum&apos;)' ordinal='11' />
            <column datatype='integer' name='(&apos;insured_female&apos;, &apos;sum&apos;)' ordinal='12' />
            <column datatype='integer' name='(&apos;uninsured_female&apos;, &apos;sum&apos;)' ordinal='13' />
            <column datatype='real' name='death_rate' ordinal='14' />
            <column datatype='string' name='race' ordinal='15' />
          </columns>
        </_.fcp.ObjectModelEncapsulateLegacy.true...relation>
        <metadata-records>
          <metadata-record class='column'>
            <remote-name>F1</remote-name>
            <remote-type>20</remote-type>
            <local-name>[F1]</local-name>
            <parent-name>[new_capstone.csv]</parent-name>
            <remote-alias>F1</remote-alias>
            <ordinal>0</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>county</remote-name>
            <remote-type>130</remote-type>
            <local-name>[county]</local-name>
            <parent-name>[new_capstone.csv]</parent-name>
            <remote-alias>county</remote-alias>
            <ordinal>1</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>(&apos;less than $10,000&apos;, &apos;sum&apos;)</remote-name>
            <remote-type>20</remote-type>
            <local-name>[(&apos;less than $10,000&apos;, &apos;sum&apos;)]</local-name>
            <parent-name>[new_capstone.csv]</parent-name>
            <remote-alias>(&apos;less than $10,000&apos;, &apos;sum&apos;)</remote-alias>
            <ordinal>2</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>(&apos;income_$10,000 to $14,999&apos;, &apos;sum&apos;)</remote-name>
            <remote-type>20</remote-type>
            <local-name>[(&apos;income_$10,000 to $14,999&apos;, &apos;sum&apos;)]</local-name>
            <parent-name>[new_capstone.csv]</parent-name>
            <remote-alias>(&apos;income_$10,000 to $14,999&apos;, &apos;sum&apos;)</remote-alias>
            <ordinal>3</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>(&apos;income_$15,000 to $24,999&apos;, &apos;sum&apos;)</remote-name>
            <remote-type>20</remote-type>
            <local-name>[(&apos;income_$15,000 to $24,999&apos;, &apos;sum&apos;)]</local-name>
            <parent-name>[new_capstone.csv]</parent-name>
            <remote-alias>(&apos;income_$15,000 to $24,999&apos;, &apos;sum&apos;)</remote-alias>
            <ordinal>4</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>(&apos;income_$25,000 to $34,999&apos;, &apos;sum&apos;)</remote-name>
            <remote-type>20</remote-type>
            <local-name>[(&apos;income_$25,000 to $34,999&apos;, &apos;sum&apos;)]</local-name>
            <parent-name>[new_capstone.csv]</parent-name>
            <remote-alias>(&apos;income_$25,000 to $34,999&apos;, &apos;sum&apos;)</remote-alias>
            <ordinal>5</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>(&apos;income_$35,000 to $49,999&apos;, &apos;sum&apos;)</remote-name>
            <remote-type>20</remote-type>
            <local-name>[(&apos;income_$35,000 to $49,999&apos;, &apos;sum&apos;)]</local-name>
            <parent-name>[new_capstone.csv]</parent-name>
            <remote-alias>(&apos;income_$35,000 to $49,999&apos;, &apos;sum&apos;)</remote-alias>
            <ordinal>6</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>(&apos;income_$50,000 to $74,999&apos;, &apos;sum&apos;)</remote-name>
            <remote-type>20</remote-type>
            <local-name>[(&apos;income_$50,000 to $74,999&apos;, &apos;sum&apos;)]</local-name>
            <parent-name>[new_capstone.csv]</parent-name>
            <remote-alias>(&apos;income_$50,000 to $74,999&apos;, &apos;sum&apos;)</remote-alias>
            <ordinal>7</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>(&apos;income_$75,000 to $99,999&apos;, &apos;sum&apos;)</remote-name>
            <remote-type>20</remote-type>
            <local-name>[(&apos;income_$75,000 to $99,999&apos;, &apos;sum&apos;)]</local-name>
            <parent-name>[new_capstone.csv]</parent-name>
            <remote-alias>(&apos;income_$75,000 to $99,999&apos;, &apos;sum&apos;)</remote-alias>
            <ordinal>8</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>(&apos;income_$100,000 to $149,999&apos;, &apos;sum&apos;)</remote-name>
            <remote-type>20</remote-type>
            <local-name>[(&apos;income_$100,000 to $149,999&apos;, &apos;sum&apos;)]</local-name>
            <parent-name>[new_capstone.csv]</parent-name>
            <remote-alias>(&apos;income_$100,000 to $149,999&apos;, &apos;sum&apos;)</remote-alias>
            <ordinal>9</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>(&apos;income_$150,000 to $199,999&apos;, &apos;sum&apos;)</remote-name>
            <remote-type>20</remote-type>
            <local-name>[(&apos;income_$150,000 to $199,999&apos;, &apos;sum&apos;)]</local-name>
            <parent-name>[new_capstone.csv]</parent-name>
            <remote-alias>(&apos;income_$150,000 to $199,999&apos;, &apos;sum&apos;)</remote-alias>
            <ordinal>10</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>(&apos;income_$200,000 or more&apos;, &apos;sum&apos;)</remote-name>
            <remote-type>20</remote-type>
            <local-name>[(&apos;income_$200,000 or more&apos;, &apos;sum&apos;)]</local-name>
            <parent-name>[new_capstone.csv]</parent-name>
            <remote-alias>(&apos;income_$200,000 or more&apos;, &apos;sum&apos;)</remote-alias>
            <ordinal>11</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>(&apos;insured_female&apos;, &apos;sum&apos;)</remote-name>
            <remote-type>20</remote-type>
            <local-name>[(&apos;insured_female&apos;, &apos;sum&apos;)]</local-name>
            <parent-name>[new_capstone.csv]</parent-name>
            <remote-alias>(&apos;insured_female&apos;, &apos;sum&apos;)</remote-alias>
            <ordinal>12</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>(&apos;uninsured_female&apos;, &apos;sum&apos;)</remote-name>
            <remote-type>20</remote-type>
            <local-name>[(&apos;uninsured_female&apos;, &apos;sum&apos;)]</local-name>
            <parent-name>[new_capstone.csv]</parent-name>
            <remote-alias>(&apos;uninsured_female&apos;, &apos;sum&apos;)</remote-alias>
            <ordinal>13</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>death_rate</remote-name>
            <remote-type>5</remote-type>
            <local-name>[death_rate]</local-name>
            <parent-name>[new_capstone.csv]</parent-name>
            <remote-alias>death_rate</remote-alias>
            <ordinal>14</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>race</remote-name>
            <remote-type>130</remote-type>
            <local-name>[race]</local-name>
            <parent-name>[new_capstone.csv]</parent-name>
            <remote-alias>race</remote-alias>
            <ordinal>15</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[new_capstone.csv]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='context'>0</attribute>
              <attribute datatype='string' name='gridOrigin'>&quot;A1:P96:no:A1:P96:1&quot;</attribute>
              <attribute datatype='integer' name='lost'>0</attribute>
              <attribute datatype='integer' name='outcome'>1</attribute>
              <attribute datatype='integer' name='processed'>1304</attribute>
            </attributes>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column caption='Income $10,000 To $14,999' datatype='integer' name='[(&apos;income_$10,000 to $14,999&apos;, &apos;sum&apos;)]' role='measure' type='quantitative' />
      <column caption='Income $100,000 To $149,999' datatype='integer' name='[(&apos;income_$100,000 to $149,999&apos;, &apos;sum&apos;)]' role='measure' type='quantitative' />
      <column caption='Income $15,000 To $24,999' datatype='integer' name='[(&apos;income_$15,000 to $24,999&apos;, &apos;sum&apos;)]' role='measure' type='quantitative' />
      <column caption='Income $150,000 To $199,999' datatype='integer' name='[(&apos;income_$150,000 to $199,999&apos;, &apos;sum&apos;)]' role='measure' type='quantitative' />
      <column caption='Income $200,000 Or More' datatype='integer' name='[(&apos;income_$200,000 or more&apos;, &apos;sum&apos;)]' role='measure' type='quantitative' />
      <column caption='Income $25,000 To $34,999' datatype='integer' name='[(&apos;income_$25,000 to $34,999&apos;, &apos;sum&apos;)]' role='measure' type='quantitative' />
      <column caption='Income $35,000 To $49,999' datatype='integer' name='[(&apos;income_$35,000 to $49,999&apos;, &apos;sum&apos;)]' role='measure' type='quantitative' />
      <column caption='Income $50,000 To $74,999' datatype='integer' name='[(&apos;income_$50,000 to $74,999&apos;, &apos;sum&apos;)]' role='measure' type='quantitative' />
      <column caption='Income $75,000 To $99,999' datatype='integer' name='[(&apos;income_$75,000 to $99,999&apos;, &apos;sum&apos;)]' role='measure' type='quantitative' />
      <column caption='Insured Female' datatype='integer' name='[(&apos;insured_female&apos;, &apos;sum&apos;)]' role='measure' type='quantitative' />
      <column caption='Less Than $10,000' datatype='integer' name='[(&apos;less than $10,000&apos;, &apos;sum&apos;)]' role='measure' type='quantitative' />
      <column caption='Uninsured Female' datatype='integer' name='[(&apos;uninsured_female&apos;, &apos;sum&apos;)]' role='measure' type='quantitative' />
      <_.fcp.ObjectModelTableType.true...column caption='new_capstone.csv' datatype='table' name='[__tableau_internal_object_id__].[new_capstone.csv_5960039561C3450295DE56E52CD70675]' role='measure' type='quantitative' />
      <column caption='County' datatype='string' name='[county]' role='dimension' semantic-role='[County].[Name]' type='nominal' />
      <column caption='Death Rate' datatype='real' name='[death_rate]' role='measure' type='quantitative' />
      <column caption='Race' datatype='string' name='[race]' role='dimension' type='nominal' />
      <column-instance column='[county]' derivation='None' name='[none:county:nk]' pivot='key' type='nominal' />
      <column-instance column='[(&apos;income_$10,000 to $14,999&apos;, &apos;sum&apos;)]' derivation='Sum' name='[sum:(&apos;income_$10,000 to $14,999&apos;, &apos;sum&apos;):qk]' pivot='key' type='quantitative' />
      <column-instance column='[(&apos;income_$100,000 to $149,999&apos;, &apos;sum&apos;)]' derivation='Sum' name='[sum:(&apos;income_$100,000 to $149,999&apos;, &apos;sum&apos;):qk]' pivot='key' type='quantitative' />
      <column-instance column='[(&apos;income_$15,000 to $24,999&apos;, &apos;sum&apos;)]' derivation='Sum' name='[sum:(&apos;income_$15,000 to $24,999&apos;, &apos;sum&apos;):qk]' pivot='key' type='quantitative' />
      <column-instance column='[(&apos;income_$150,000 to $199,999&apos;, &apos;sum&apos;)]' derivation='Sum' name='[sum:(&apos;income_$150,000 to $199,999&apos;, &apos;sum&apos;):qk]' pivot='key' type='quantitative' />
      <column-instance column='[(&apos;income_$200,000 or more&apos;, &apos;sum&apos;)]' derivation='Sum' name='[sum:(&apos;income_$200,000 or more&apos;, &apos;sum&apos;):qk]' pivot='key' type='quantitative' />
      <column-instance column='[(&apos;income_$25,000 to $34,999&apos;, &apos;sum&apos;)]' derivation='Sum' name='[sum:(&apos;income_$25,000 to $34,999&apos;, &apos;sum&apos;):qk]' pivot='key' type='quantitative' />
      <column-instance column='[(&apos;income_$35,000 to $49,999&apos;, &apos;sum&apos;)]' derivation='Sum' name='[sum:(&apos;income_$35,000 to $49,999&apos;, &apos;sum&apos;):qk]' pivot='key' type='quantitative' />
      <column-instance column='[(&apos;income_$50,000 to $74,999&apos;, &apos;sum&apos;)]' derivation='Sum' name='[sum:(&apos;income_$50,000 to $74,999&apos;, &apos;sum&apos;):qk]' pivot='key' type='quantitative' />
      <column-instance column='[(&apos;income_$75,000 to $99,999&apos;, &apos;sum&apos;)]' derivation='Sum' name='[sum:(&apos;income_$75,000 to $99,999&apos;, &apos;sum&apos;):qk]' pivot='key' type='quantitative' />
      <column-instance column='[(&apos;less than $10,000&apos;, &apos;sum&apos;)]' derivation='Sum' name='[sum:(&apos;less than $10,000&apos;, &apos;sum&apos;):qk]' pivot='key' type='quantitative' />
      <column-instance column='[(&apos;uninsured_female&apos;, &apos;sum&apos;)]' derivation='Sum' name='[sum:(&apos;uninsured_female&apos;, &apos;sum&apos;):qk]' pivot='key' type='quantitative' />
      <column-instance column='[death_rate]' derivation='Sum' name='[sum:death_rate:qk]' pivot='key' type='quantitative' />
      <layout _.fcp.SchemaViewerObjectModel.false...dim-percentage='0.5' _.fcp.SchemaViewerObjectModel.false...measure-percentage='0.4' dim-ordering='alphabetic' measure-ordering='alphabetic' show-structure='true' />
      <style>
        <style-rule element='mark'>
          <encoding attr='color' field='[none:county:nk]' type='palette'>
            <map to='#499894'>
              <bucket>&quot;Coffee County&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Hamilton County&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Polk County&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Roane County&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Union County&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Campbell County&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Crockett County&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Henry County&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Johnson County&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Marshall County&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Franklin County&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Grundy County&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Meigs County&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Sumner County&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Warren County&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Anderson County&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Chester County&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Clay County&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Trousdale County&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Washington County&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Benton County&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Dickson County&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Gibson County&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Sequatchie County&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Williamson County&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Carter County&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Cumberland County&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Giles County&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Henderson County&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Moore County&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Dyer County&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Houston County&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Rhea County&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;White County&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Hardeman County&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Lake County&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Robertson County&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Sevier County&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Unicoi County&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Bradley County&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Hancock County&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Knox County&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Putnam County&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Bedford County&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Claiborne County&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Greene County&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Perry County&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Tipton County&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Cocke County&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Decatur County&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Monroe County&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Morgan County&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Van Buren County&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Cheatham County&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Davidson County&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Fentress County&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Montgomery County&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Wayne County&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Blount County&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Carroll County&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Haywood County&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Rutherford County&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Jackson County&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Jefferson County&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Lawrence County&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Loudon County&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Bledsoe County&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Hawkins County&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Humphreys County&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Shelby County&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Smith County&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Hardin County&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Lauderdale County&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;McMinn County&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Overton County&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Pickett County&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;DeKalb County&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Lewis County&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Lincoln County&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Maury County&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Scott County&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Grainger County&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Marion County&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;McNairy County&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Wilson County&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Cannon County&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Hickman County&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Madison County&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Obion County&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Stewart County&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Fayette County&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Hamblen County&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Macon County&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Sullivan County&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Weakley County&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[:Measure Names]' type='palette'>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.17qsjmp0vxkl2s1ecz8ay1iq3y3d].[sum:(&apos;income_$10,000 to $14,999&apos;, &apos;sum&apos;):qk]&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;[federated.17qsjmp0vxkl2s1ecz8ay1iq3y3d].[sum:(&apos;income_$100,000 to $149,999&apos;, &apos;sum&apos;):qk]&quot;</bucket>
            </map>
            <map to='#76b7b2'>
              <bucket>&quot;[federated.17qsjmp0vxkl2s1ecz8ay1iq3y3d].[sum:death_rate:qk]&quot;</bucket>
            </map>
            <map to='#9c755f'>
              <bucket>&quot;[federated.17qsjmp0vxkl2s1ecz8ay1iq3y3d].[sum:(&apos;income_$150,000 to $199,999&apos;, &apos;sum&apos;):qk]&quot;</bucket>
            </map>
            <map to='#9c755f'>
              <bucket>&quot;[federated.17qsjmp0vxkl2s1ecz8ay1iq3y3d].[sum:(&apos;income_$50,000 to $74,999&apos;, &apos;sum&apos;):qk]&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;[federated.17qsjmp0vxkl2s1ecz8ay1iq3y3d].[sum:(&apos;income_$25,000 to $34,999&apos;, &apos;sum&apos;):qk]&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;[federated.17qsjmp0vxkl2s1ecz8ay1iq3y3d].[sum:(&apos;income_$75,000 to $99,999&apos;, &apos;sum&apos;):qk]&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;[federated.17qsjmp0vxkl2s1ecz8ay1iq3y3d]&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;[federated.17qsjmp0vxkl2s1ecz8ay1iq3y3d].[sum:(&apos;income_$200,000 or more&apos;, &apos;sum&apos;):qk]&quot;</bucket>
            </map>
            <map to='#edc948'>
              <bucket>&quot;[federated.17qsjmp0vxkl2s1ecz8ay1iq3y3d].[sum:(&apos;income_$15,000 to $24,999&apos;, &apos;sum&apos;):qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.17qsjmp0vxkl2s1ecz8ay1iq3y3d].[sum:(&apos;less than $10,000&apos;, &apos;sum&apos;):qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.17qsjmp0vxkl2s1ecz8ay1iq3y3d].[sum:(&apos;uninsured_female&apos;, &apos;sum&apos;):qk]&quot;</bucket>
            </map>
            <map to='#ff9da7'>
              <bucket>&quot;[federated.17qsjmp0vxkl2s1ecz8ay1iq3y3d].[sum:(&apos;income_$35,000 to $49,999&apos;, &apos;sum&apos;):qk]&quot;</bucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;United States&quot;' />
      </semantic-values>
      <_.fcp.ObjectModelEncapsulateLegacy.true...object-graph>
        <objects>
          <object caption='new_capstone.csv' id='new_capstone.csv_5960039561C3450295DE56E52CD70675'>
            <properties context=''>
              <relation connection='textscan.0c8qoql0r6o6yr14tcv5w1ulznmk' name='new_capstone.csv' table='[new_capstone#csv$]' type='table'>
                <columns character-set='UTF-8' gridOrigin='A1:P96:no:A1:P96:1' header='yes' locale='en_US' separator=','>
                  <column datatype='integer' name='F1' ordinal='0' />
                  <column datatype='string' name='county' ordinal='1' />
                  <column datatype='integer' name='(&apos;less than $10,000&apos;, &apos;sum&apos;)' ordinal='2' />
                  <column datatype='integer' name='(&apos;income_$10,000 to $14,999&apos;, &apos;sum&apos;)' ordinal='3' />
                  <column datatype='integer' name='(&apos;income_$15,000 to $24,999&apos;, &apos;sum&apos;)' ordinal='4' />
                  <column datatype='integer' name='(&apos;income_$25,000 to $34,999&apos;, &apos;sum&apos;)' ordinal='5' />
                  <column datatype='integer' name='(&apos;income_$35,000 to $49,999&apos;, &apos;sum&apos;)' ordinal='6' />
                  <column datatype='integer' name='(&apos;income_$50,000 to $74,999&apos;, &apos;sum&apos;)' ordinal='7' />
                  <column datatype='integer' name='(&apos;income_$75,000 to $99,999&apos;, &apos;sum&apos;)' ordinal='8' />
                  <column datatype='integer' name='(&apos;income_$100,000 to $149,999&apos;, &apos;sum&apos;)' ordinal='9' />
                  <column datatype='integer' name='(&apos;income_$150,000 to $199,999&apos;, &apos;sum&apos;)' ordinal='10' />
                  <column datatype='integer' name='(&apos;income_$200,000 or more&apos;, &apos;sum&apos;)' ordinal='11' />
                  <column datatype='integer' name='(&apos;insured_female&apos;, &apos;sum&apos;)' ordinal='12' />
                  <column datatype='integer' name='(&apos;uninsured_female&apos;, &apos;sum&apos;)' ordinal='13' />
                  <column datatype='real' name='death_rate' ordinal='14' />
                  <column datatype='string' name='race' ordinal='15' />
                </columns>
              </relation>
            </properties>
          </object>
        </objects>
      </_.fcp.ObjectModelEncapsulateLegacy.true...object-graph>
    </datasource>
  </datasources>
  <worksheets>
    <worksheet name='Income - 10-49k'>
      <layout-options>
        <title>
          <formatted-text>
            <run fontalignment='1'>Households totals by Income levels
Less than $10,000 to $49,000
(2016-2020) </run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='new_capstone' name='federated.17qsjmp0vxkl2s1ecz8ay1iq3y3d' />
          </datasources>
          <datasource-dependencies datasource='federated.17qsjmp0vxkl2s1ecz8ay1iq3y3d'>
            <column caption='Income $10,000 To $14,999' datatype='integer' name='[(&apos;income_$10,000 to $14,999&apos;, &apos;sum&apos;)]' role='measure' type='quantitative' />
            <column caption='Income $15,000 To $24,999' datatype='integer' name='[(&apos;income_$15,000 to $24,999&apos;, &apos;sum&apos;)]' role='measure' type='quantitative' />
            <column caption='Income $25,000 To $34,999' datatype='integer' name='[(&apos;income_$25,000 to $34,999&apos;, &apos;sum&apos;)]' role='measure' type='quantitative' />
            <column caption='Income $35,000 To $49,999' datatype='integer' name='[(&apos;income_$35,000 to $49,999&apos;, &apos;sum&apos;)]' role='measure' type='quantitative' />
            <column caption='Income $50,000 To $74,999' datatype='integer' name='[(&apos;income_$50,000 to $74,999&apos;, &apos;sum&apos;)]' role='measure' type='quantitative' />
            <column caption='Income $75,000 To $99,999' datatype='integer' name='[(&apos;income_$75,000 to $99,999&apos;, &apos;sum&apos;)]' role='measure' type='quantitative' />
            <column caption='Less Than $10,000' datatype='integer' name='[(&apos;less than $10,000&apos;, &apos;sum&apos;)]' role='measure' type='quantitative' />
            <column caption='Uninsured Female' datatype='integer' name='[(&apos;uninsured_female&apos;, &apos;sum&apos;)]' role='measure' type='quantitative' />
            <column caption='County' datatype='string' name='[county]' role='dimension' semantic-role='[County].[Name]' type='nominal' />
            <column caption='Death Rate' datatype='real' name='[death_rate]' role='measure' type='quantitative' />
            <column-instance column='[county]' derivation='None' name='[none:county:nk]' pivot='key' type='nominal' />
            <column-instance column='[(&apos;income_$10,000 to $14,999&apos;, &apos;sum&apos;)]' derivation='Sum' name='[sum:(&apos;income_$10,000 to $14,999&apos;, &apos;sum&apos;):qk]' pivot='key' type='quantitative' />
            <column-instance column='[(&apos;income_$15,000 to $24,999&apos;, &apos;sum&apos;)]' derivation='Sum' name='[sum:(&apos;income_$15,000 to $24,999&apos;, &apos;sum&apos;):qk]' pivot='key' type='quantitative' />
            <column-instance column='[(&apos;income_$25,000 to $34,999&apos;, &apos;sum&apos;)]' derivation='Sum' name='[sum:(&apos;income_$25,000 to $34,999&apos;, &apos;sum&apos;):qk]' pivot='key' type='quantitative' />
            <column-instance column='[(&apos;income_$35,000 to $49,999&apos;, &apos;sum&apos;)]' derivation='Sum' name='[sum:(&apos;income_$35,000 to $49,999&apos;, &apos;sum&apos;):qk]' pivot='key' type='quantitative' />
            <column-instance column='[(&apos;income_$50,000 to $74,999&apos;, &apos;sum&apos;)]' derivation='Sum' name='[sum:(&apos;income_$50,000 to $74,999&apos;, &apos;sum&apos;):qk]' pivot='key' type='quantitative' />
            <column-instance column='[(&apos;income_$75,000 to $99,999&apos;, &apos;sum&apos;)]' derivation='Sum' name='[sum:(&apos;income_$75,000 to $99,999&apos;, &apos;sum&apos;):qk]' pivot='key' type='quantitative' />
            <column-instance column='[(&apos;less than $10,000&apos;, &apos;sum&apos;)]' derivation='Sum' name='[sum:(&apos;less than $10,000&apos;, &apos;sum&apos;):qk]' pivot='key' type='quantitative' />
            <column-instance column='[(&apos;uninsured_female&apos;, &apos;sum&apos;)]' derivation='Sum' name='[sum:(&apos;uninsured_female&apos;, &apos;sum&apos;):qk]' pivot='key' type='quantitative' />
            <column-instance column='[death_rate]' derivation='Sum' name='[sum:death_rate:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.17qsjmp0vxkl2s1ecz8ay1iq3y3d].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.17qsjmp0vxkl2s1ecz8ay1iq3y3d].[sum:(&apos;less than $10,000&apos;, &apos;sum&apos;):qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.17qsjmp0vxkl2s1ecz8ay1iq3y3d].[sum:(&apos;income_$10,000 to $14,999&apos;, &apos;sum&apos;):qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.17qsjmp0vxkl2s1ecz8ay1iq3y3d].[sum:(&apos;income_$15,000 to $24,999&apos;, &apos;sum&apos;):qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.17qsjmp0vxkl2s1ecz8ay1iq3y3d].[sum:(&apos;income_$25,000 to $34,999&apos;, &apos;sum&apos;):qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.17qsjmp0vxkl2s1ecz8ay1iq3y3d].[sum:(&apos;income_$35,000 to $49,999&apos;, &apos;sum&apos;):qk]&quot;' />
            </groupfilter>
          </filter>
          <manual-sort column='[federated.17qsjmp0vxkl2s1ecz8ay1iq3y3d].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[federated.17qsjmp0vxkl2s1ecz8ay1iq3y3d].[sum:(&apos;less than $10,000&apos;, &apos;sum&apos;):qk]&quot;</bucket>
              <bucket>&quot;[federated.17qsjmp0vxkl2s1ecz8ay1iq3y3d].[sum:(&apos;income_$10,000 to $14,999&apos;, &apos;sum&apos;):qk]&quot;</bucket>
              <bucket>&quot;[federated.17qsjmp0vxkl2s1ecz8ay1iq3y3d].[sum:(&apos;income_$15,000 to $24,999&apos;, &apos;sum&apos;):qk]&quot;</bucket>
              <bucket>&quot;[federated.17qsjmp0vxkl2s1ecz8ay1iq3y3d].[sum:(&apos;income_$25,000 to $34,999&apos;, &apos;sum&apos;):qk]&quot;</bucket>
              <bucket>&quot;[federated.17qsjmp0vxkl2s1ecz8ay1iq3y3d].[sum:(&apos;income_$35,000 to $49,999&apos;, &apos;sum&apos;):qk]&quot;</bucket>
              <bucket>&quot;[federated.17qsjmp0vxkl2s1ecz8ay1iq3y3d].[sum:(&apos;income_$50,000 to $74,999&apos;, &apos;sum&apos;):qk]&quot;</bucket>
              <bucket>&quot;[federated.17qsjmp0vxkl2s1ecz8ay1iq3y3d].[sum:(&apos;income_$75,000 to $99,999&apos;, &apos;sum&apos;):qk]&quot;</bucket>
              <bucket>&quot;[federated.17qsjmp0vxkl2s1ecz8ay1iq3y3d].[sum:(&apos;uninsured_female&apos;, &apos;sum&apos;):qk]&quot;</bucket>
            </dictionary>
          </manual-sort>
          <computed-sort column='[federated.17qsjmp0vxkl2s1ecz8ay1iq3y3d].[none:county:nk]' direction='DESC' using='[federated.17qsjmp0vxkl2s1ecz8ay1iq3y3d].[sum:death_rate:qk]' />
          <filter class='quantitative' column='[federated.17qsjmp0vxkl2s1ecz8ay1iq3y3d].[sum:death_rate:qk]' included-values='in-range'>
            <min>25.649999999999999</min>
            <max>32.0</max>
          </filter>
          <slices>
            <column>[federated.17qsjmp0vxkl2s1ecz8ay1iq3y3d].[sum:death_rate:qk]</column>
            <column>[federated.17qsjmp0vxkl2s1ecz8ay1iq3y3d].[:Measure Names]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='text-format' field='[federated.17qsjmp0vxkl2s1ecz8ay1iq3y3d].[sum:death_rate:qk]' value='N' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Shape' />
            <encodings>
              <color column='[federated.17qsjmp0vxkl2s1ecz8ay1iq3y3d].[:Measure Names]' />
              <text column='[federated.17qsjmp0vxkl2s1ecz8ay1iq3y3d].[Multiple Values]' />
            </encodings>
            <style>
              <style-rule element='cell'>
                <format attr='vertical-align' value='top' />
              </style-rule>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.17qsjmp0vxkl2s1ecz8ay1iq3y3d].[none:county:nk]</rows>
        <cols>([federated.17qsjmp0vxkl2s1ecz8ay1iq3y3d].[:Measure Names] * [federated.17qsjmp0vxkl2s1ecz8ay1iq3y3d].[Multiple Values])</cols>
      </table>
      <simple-id uuid='{A1CF078E-2E01-47EE-8822-5303AEADD3AB}' />
    </worksheet>
    <worksheet name='Income 50-200k'>
      <layout-options>
        <title>
          <formatted-text>
            <run fontalignment='1'>Households totals by Income levels
 $50,000 to $200,000
(2016-2020) </run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='new_capstone' name='federated.17qsjmp0vxkl2s1ecz8ay1iq3y3d' />
          </datasources>
          <datasource-dependencies datasource='federated.17qsjmp0vxkl2s1ecz8ay1iq3y3d'>
            <column caption='Income $100,000 To $149,999' datatype='integer' name='[(&apos;income_$100,000 to $149,999&apos;, &apos;sum&apos;)]' role='measure' type='quantitative' />
            <column caption='Income $150,000 To $199,999' datatype='integer' name='[(&apos;income_$150,000 to $199,999&apos;, &apos;sum&apos;)]' role='measure' type='quantitative' />
            <column caption='Income $200,000 Or More' datatype='integer' name='[(&apos;income_$200,000 or more&apos;, &apos;sum&apos;)]' role='measure' type='quantitative' />
            <column caption='Income $35,000 To $49,999' datatype='integer' name='[(&apos;income_$35,000 to $49,999&apos;, &apos;sum&apos;)]' role='measure' type='quantitative' />
            <column caption='Income $50,000 To $74,999' datatype='integer' name='[(&apos;income_$50,000 to $74,999&apos;, &apos;sum&apos;)]' role='measure' type='quantitative' />
            <column caption='Income $75,000 To $99,999' datatype='integer' name='[(&apos;income_$75,000 to $99,999&apos;, &apos;sum&apos;)]' role='measure' type='quantitative' />
            <column caption='County' datatype='string' name='[county]' role='dimension' semantic-role='[County].[Name]' type='nominal' />
            <column caption='Death Rate' datatype='real' name='[death_rate]' role='measure' type='quantitative' />
            <column-instance column='[county]' derivation='None' name='[none:county:nk]' pivot='key' type='nominal' />
            <column-instance column='[(&apos;income_$100,000 to $149,999&apos;, &apos;sum&apos;)]' derivation='Sum' name='[sum:(&apos;income_$100,000 to $149,999&apos;, &apos;sum&apos;):qk]' pivot='key' type='quantitative' />
            <column-instance column='[(&apos;income_$150,000 to $199,999&apos;, &apos;sum&apos;)]' derivation='Sum' name='[sum:(&apos;income_$150,000 to $199,999&apos;, &apos;sum&apos;):qk]' pivot='key' type='quantitative' />
            <column-instance column='[(&apos;income_$200,000 or more&apos;, &apos;sum&apos;)]' derivation='Sum' name='[sum:(&apos;income_$200,000 or more&apos;, &apos;sum&apos;):qk]' pivot='key' type='quantitative' />
            <column-instance column='[(&apos;income_$35,000 to $49,999&apos;, &apos;sum&apos;)]' derivation='Sum' name='[sum:(&apos;income_$35,000 to $49,999&apos;, &apos;sum&apos;):qk]' pivot='key' type='quantitative' />
            <column-instance column='[(&apos;income_$50,000 to $74,999&apos;, &apos;sum&apos;)]' derivation='Sum' name='[sum:(&apos;income_$50,000 to $74,999&apos;, &apos;sum&apos;):qk]' pivot='key' type='quantitative' />
            <column-instance column='[(&apos;income_$75,000 to $99,999&apos;, &apos;sum&apos;)]' derivation='Sum' name='[sum:(&apos;income_$75,000 to $99,999&apos;, &apos;sum&apos;):qk]' pivot='key' type='quantitative' />
            <column-instance column='[death_rate]' derivation='Sum' name='[sum:death_rate:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.17qsjmp0vxkl2s1ecz8ay1iq3y3d].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.17qsjmp0vxkl2s1ecz8ay1iq3y3d].[sum:(&apos;income_$50,000 to $74,999&apos;, &apos;sum&apos;):qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.17qsjmp0vxkl2s1ecz8ay1iq3y3d].[sum:(&apos;income_$75,000 to $99,999&apos;, &apos;sum&apos;):qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.17qsjmp0vxkl2s1ecz8ay1iq3y3d].[sum:(&apos;income_$100,000 to $149,999&apos;, &apos;sum&apos;):qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.17qsjmp0vxkl2s1ecz8ay1iq3y3d].[sum:(&apos;income_$150,000 to $199,999&apos;, &apos;sum&apos;):qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.17qsjmp0vxkl2s1ecz8ay1iq3y3d].[sum:(&apos;income_$200,000 or more&apos;, &apos;sum&apos;):qk]&quot;' />
            </groupfilter>
          </filter>
          <manual-sort column='[federated.17qsjmp0vxkl2s1ecz8ay1iq3y3d].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[federated.17qsjmp0vxkl2s1ecz8ay1iq3y3d].[sum:(&apos;income_$50,000 to $74,999&apos;, &apos;sum&apos;):qk]&quot;</bucket>
              <bucket>&quot;[federated.17qsjmp0vxkl2s1ecz8ay1iq3y3d].[sum:(&apos;income_$75,000 to $99,999&apos;, &apos;sum&apos;):qk]&quot;</bucket>
              <bucket>&quot;[federated.17qsjmp0vxkl2s1ecz8ay1iq3y3d].[sum:(&apos;income_$100,000 to $149,999&apos;, &apos;sum&apos;):qk]&quot;</bucket>
              <bucket>&quot;[federated.17qsjmp0vxkl2s1ecz8ay1iq3y3d].[sum:(&apos;income_$150,000 to $199,999&apos;, &apos;sum&apos;):qk]&quot;</bucket>
              <bucket>&quot;[federated.17qsjmp0vxkl2s1ecz8ay1iq3y3d].[sum:(&apos;income_$200,000 or more&apos;, &apos;sum&apos;):qk]&quot;</bucket>
              <bucket>&quot;[federated.17qsjmp0vxkl2s1ecz8ay1iq3y3d].[sum:(&apos;income_$35,000 to $49,999&apos;, &apos;sum&apos;):qk]&quot;</bucket>
            </dictionary>
          </manual-sort>
          <computed-sort column='[federated.17qsjmp0vxkl2s1ecz8ay1iq3y3d].[none:county:nk]' direction='DESC' using='[federated.17qsjmp0vxkl2s1ecz8ay1iq3y3d].[sum:death_rate:qk]' />
          <filter class='quantitative' column='[federated.17qsjmp0vxkl2s1ecz8ay1iq3y3d].[sum:death_rate:qk]' included-values='in-range'>
            <min>25.649999999999999</min>
            <max>32.0</max>
          </filter>
          <slices>
            <column>[federated.17qsjmp0vxkl2s1ecz8ay1iq3y3d].[sum:death_rate:qk]</column>
            <column>[federated.17qsjmp0vxkl2s1ecz8ay1iq3y3d].[:Measure Names]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='text-format' field='[federated.17qsjmp0vxkl2s1ecz8ay1iq3y3d].[sum:death_rate:qk]' value='N' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Shape' />
            <encodings>
              <color column='[federated.17qsjmp0vxkl2s1ecz8ay1iq3y3d].[:Measure Names]' />
              <text column='[federated.17qsjmp0vxkl2s1ecz8ay1iq3y3d].[Multiple Values]' />
            </encodings>
            <style>
              <style-rule element='cell'>
                <format attr='vertical-align' value='top' />
              </style-rule>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.17qsjmp0vxkl2s1ecz8ay1iq3y3d].[none:county:nk]</rows>
        <cols>([federated.17qsjmp0vxkl2s1ecz8ay1iq3y3d].[:Measure Names] * [federated.17qsjmp0vxkl2s1ecz8ay1iq3y3d].[Multiple Values])</cols>
      </table>
      <simple-id uuid='{9AC80B98-CCF9-4625-A8D0-3B926432D26C}' />
    </worksheet>
    <worksheet name='Income 50-200k (2)'>
      <layout-options>
        <title>
          <formatted-text>
            <run fontalignment='1'>Death Rates &amp; Unisured Females
(2016-2020) </run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='new_capstone' name='federated.17qsjmp0vxkl2s1ecz8ay1iq3y3d' />
          </datasources>
          <datasource-dependencies datasource='federated.17qsjmp0vxkl2s1ecz8ay1iq3y3d'>
            <column caption='Income $50,000 To $74,999' datatype='integer' name='[(&apos;income_$50,000 to $74,999&apos;, &apos;sum&apos;)]' role='measure' type='quantitative' />
            <column caption='Income $75,000 To $99,999' datatype='integer' name='[(&apos;income_$75,000 to $99,999&apos;, &apos;sum&apos;)]' role='measure' type='quantitative' />
            <column caption='Uninsured Female' datatype='integer' name='[(&apos;uninsured_female&apos;, &apos;sum&apos;)]' role='measure' type='quantitative' />
            <column caption='County' datatype='string' name='[county]' role='dimension' semantic-role='[County].[Name]' type='nominal' />
            <column caption='Death Rate' datatype='real' name='[death_rate]' role='measure' type='quantitative' />
            <column-instance column='[county]' derivation='None' name='[none:county:nk]' pivot='key' type='nominal' />
            <column-instance column='[(&apos;income_$50,000 to $74,999&apos;, &apos;sum&apos;)]' derivation='Sum' name='[sum:(&apos;income_$50,000 to $74,999&apos;, &apos;sum&apos;):qk]' pivot='key' type='quantitative' />
            <column-instance column='[(&apos;income_$75,000 to $99,999&apos;, &apos;sum&apos;)]' derivation='Sum' name='[sum:(&apos;income_$75,000 to $99,999&apos;, &apos;sum&apos;):qk]' pivot='key' type='quantitative' />
            <column-instance column='[(&apos;uninsured_female&apos;, &apos;sum&apos;)]' derivation='Sum' name='[sum:(&apos;uninsured_female&apos;, &apos;sum&apos;):qk]' pivot='key' type='quantitative' />
            <column-instance column='[death_rate]' derivation='Sum' name='[sum:death_rate:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.17qsjmp0vxkl2s1ecz8ay1iq3y3d].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.17qsjmp0vxkl2s1ecz8ay1iq3y3d].[sum:death_rate:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.17qsjmp0vxkl2s1ecz8ay1iq3y3d].[sum:(&apos;uninsured_female&apos;, &apos;sum&apos;):qk]&quot;' />
            </groupfilter>
          </filter>
          <manual-sort column='[federated.17qsjmp0vxkl2s1ecz8ay1iq3y3d].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[federated.17qsjmp0vxkl2s1ecz8ay1iq3y3d].[sum:(&apos;income_$50,000 to $74,999&apos;, &apos;sum&apos;):qk]&quot;</bucket>
              <bucket>&quot;[federated.17qsjmp0vxkl2s1ecz8ay1iq3y3d].[sum:(&apos;income_$75,000 to $99,999&apos;, &apos;sum&apos;):qk]&quot;</bucket>
              <bucket>&quot;[federated.17qsjmp0vxkl2s1ecz8ay1iq3y3d].[sum:death_rate:qk]&quot;</bucket>
              <bucket>&quot;[federated.17qsjmp0vxkl2s1ecz8ay1iq3y3d].[sum:(&apos;uninsured_female&apos;, &apos;sum&apos;):qk]&quot;</bucket>
            </dictionary>
          </manual-sort>
          <computed-sort column='[federated.17qsjmp0vxkl2s1ecz8ay1iq3y3d].[none:county:nk]' direction='DESC' using='[federated.17qsjmp0vxkl2s1ecz8ay1iq3y3d].[sum:death_rate:qk]' />
          <filter class='quantitative' column='[federated.17qsjmp0vxkl2s1ecz8ay1iq3y3d].[sum:death_rate:qk]' included-values='in-range'>
            <min>25.649999999999999</min>
            <max>32.0</max>
          </filter>
          <slices>
            <column>[federated.17qsjmp0vxkl2s1ecz8ay1iq3y3d].[sum:death_rate:qk]</column>
            <column>[federated.17qsjmp0vxkl2s1ecz8ay1iq3y3d].[:Measure Names]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='text-format' field='[federated.17qsjmp0vxkl2s1ecz8ay1iq3y3d].[sum:death_rate:qk]' value='N' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Shape' />
            <encodings>
              <color column='[federated.17qsjmp0vxkl2s1ecz8ay1iq3y3d].[:Measure Names]' />
              <text column='[federated.17qsjmp0vxkl2s1ecz8ay1iq3y3d].[Multiple Values]' />
            </encodings>
            <style>
              <style-rule element='cell'>
                <format attr='vertical-align' value='top' />
              </style-rule>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.17qsjmp0vxkl2s1ecz8ay1iq3y3d].[none:county:nk]</rows>
        <cols>([federated.17qsjmp0vxkl2s1ecz8ay1iq3y3d].[:Measure Names] * [federated.17qsjmp0vxkl2s1ecz8ay1iq3y3d].[Multiple Values])</cols>
      </table>
      <simple-id uuid='{213B458D-37B0-4E66-AA57-2605FA21D637}' />
    </worksheet>
    <worksheet name='Sheet 1'>
      <table>
        <view>
          <datasources>
            <datasource caption='new_capstone' name='federated.17qsjmp0vxkl2s1ecz8ay1iq3y3d' />
          </datasources>
          <datasource-dependencies datasource='federated.17qsjmp0vxkl2s1ecz8ay1iq3y3d'>
            <column caption='County' datatype='string' name='[county]' role='dimension' semantic-role='[County].[Name]' type='nominal' />
            <column caption='Death Rate' datatype='real' name='[death_rate]' role='measure' type='quantitative' />
            <column-instance column='[county]' derivation='None' name='[none:county:nk]' pivot='key' type='nominal' />
            <column-instance column='[death_rate]' derivation='Sum' name='[sum:death_rate:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <computed-sort column='[federated.17qsjmp0vxkl2s1ecz8ay1iq3y3d].[none:county:nk]' direction='DESC' using='[federated.17qsjmp0vxkl2s1ecz8ay1iq3y3d].[sum:death_rate:qk]' />
          <filter class='quantitative' column='[federated.17qsjmp0vxkl2s1ecz8ay1iq3y3d].[sum:death_rate:qk]' included-values='in-range'>
            <min>25.649999999999999</min>
            <max>32.0</max>
          </filter>
          <slices>
            <column>[federated.17qsjmp0vxkl2s1ecz8ay1iq3y3d].[sum:death_rate:qk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='text-format' field='[federated.17qsjmp0vxkl2s1ecz8ay1iq3y3d].[sum:death_rate:qk]' value='N' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[federated.17qsjmp0vxkl2s1ecz8ay1iq3y3d].[sum:death_rate:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.17qsjmp0vxkl2s1ecz8ay1iq3y3d].[none:county:nk]</rows>
        <cols>[federated.17qsjmp0vxkl2s1ecz8ay1iq3y3d].[sum:death_rate:qk]</cols>
      </table>
      <simple-id uuid='{E7684059-1292-4232-94F3-FF10C072884B}' />
    </worksheet>
    <worksheet name='high_death'>
      <layout-options>
        <title>
          <formatted-text>
            <run fontalignment='1'>Households by Income levels
(2016-2020) </run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='new_capstone' name='federated.17qsjmp0vxkl2s1ecz8ay1iq3y3d' />
          </datasources>
          <datasource-dependencies datasource='federated.17qsjmp0vxkl2s1ecz8ay1iq3y3d'>
            <column caption='Income $10,000 To $14,999' datatype='integer' name='[(&apos;income_$10,000 to $14,999&apos;, &apos;sum&apos;)]' role='measure' type='quantitative' />
            <column caption='Income $100,000 To $149,999' datatype='integer' name='[(&apos;income_$100,000 to $149,999&apos;, &apos;sum&apos;)]' role='measure' type='quantitative' />
            <column caption='Income $15,000 To $24,999' datatype='integer' name='[(&apos;income_$15,000 to $24,999&apos;, &apos;sum&apos;)]' role='measure' type='quantitative' />
            <column caption='Income $150,000 To $199,999' datatype='integer' name='[(&apos;income_$150,000 to $199,999&apos;, &apos;sum&apos;)]' role='measure' type='quantitative' />
            <column caption='Income $200,000 Or More' datatype='integer' name='[(&apos;income_$200,000 or more&apos;, &apos;sum&apos;)]' role='measure' type='quantitative' />
            <column caption='Income $25,000 To $34,999' datatype='integer' name='[(&apos;income_$25,000 to $34,999&apos;, &apos;sum&apos;)]' role='measure' type='quantitative' />
            <column caption='Income $35,000 To $49,999' datatype='integer' name='[(&apos;income_$35,000 to $49,999&apos;, &apos;sum&apos;)]' role='measure' type='quantitative' />
            <column caption='Income $50,000 To $74,999' datatype='integer' name='[(&apos;income_$50,000 to $74,999&apos;, &apos;sum&apos;)]' role='measure' type='quantitative' />
            <column caption='Income $75,000 To $99,999' datatype='integer' name='[(&apos;income_$75,000 to $99,999&apos;, &apos;sum&apos;)]' role='measure' type='quantitative' />
            <column caption='Less Than $10,000' datatype='integer' name='[(&apos;less than $10,000&apos;, &apos;sum&apos;)]' role='measure' type='quantitative' />
            <column caption='County' datatype='string' name='[county]' role='dimension' semantic-role='[County].[Name]' type='nominal' />
            <column caption='Death Rate' datatype='real' name='[death_rate]' role='measure' type='quantitative' />
            <column-instance column='[county]' derivation='None' name='[none:county:nk]' pivot='key' type='nominal' />
            <column-instance column='[(&apos;income_$10,000 to $14,999&apos;, &apos;sum&apos;)]' derivation='Sum' name='[sum:(&apos;income_$10,000 to $14,999&apos;, &apos;sum&apos;):qk]' pivot='key' type='quantitative' />
            <column-instance column='[(&apos;income_$100,000 to $149,999&apos;, &apos;sum&apos;)]' derivation='Sum' name='[sum:(&apos;income_$100,000 to $149,999&apos;, &apos;sum&apos;):qk]' pivot='key' type='quantitative' />
            <column-instance column='[(&apos;income_$15,000 to $24,999&apos;, &apos;sum&apos;)]' derivation='Sum' name='[sum:(&apos;income_$15,000 to $24,999&apos;, &apos;sum&apos;):qk]' pivot='key' type='quantitative' />
            <column-instance column='[(&apos;income_$150,000 to $199,999&apos;, &apos;sum&apos;)]' derivation='Sum' name='[sum:(&apos;income_$150,000 to $199,999&apos;, &apos;sum&apos;):qk]' pivot='key' type='quantitative' />
            <column-instance column='[(&apos;income_$200,000 or more&apos;, &apos;sum&apos;)]' derivation='Sum' name='[sum:(&apos;income_$200,000 or more&apos;, &apos;sum&apos;):qk]' pivot='key' type='quantitative' />
            <column-instance column='[(&apos;income_$25,000 to $34,999&apos;, &apos;sum&apos;)]' derivation='Sum' name='[sum:(&apos;income_$25,000 to $34,999&apos;, &apos;sum&apos;):qk]' pivot='key' type='quantitative' />
            <column-instance column='[(&apos;income_$35,000 to $49,999&apos;, &apos;sum&apos;)]' derivation='Sum' name='[sum:(&apos;income_$35,000 to $49,999&apos;, &apos;sum&apos;):qk]' pivot='key' type='quantitative' />
            <column-instance column='[(&apos;income_$50,000 to $74,999&apos;, &apos;sum&apos;)]' derivation='Sum' name='[sum:(&apos;income_$50,000 to $74,999&apos;, &apos;sum&apos;):qk]' pivot='key' type='quantitative' />
            <column-instance column='[(&apos;income_$75,000 to $99,999&apos;, &apos;sum&apos;)]' derivation='Sum' name='[sum:(&apos;income_$75,000 to $99,999&apos;, &apos;sum&apos;):qk]' pivot='key' type='quantitative' />
            <column-instance column='[(&apos;less than $10,000&apos;, &apos;sum&apos;)]' derivation='Sum' name='[sum:(&apos;less than $10,000&apos;, &apos;sum&apos;):qk]' pivot='key' type='quantitative' />
            <column-instance column='[death_rate]' derivation='Sum' name='[sum:death_rate:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.17qsjmp0vxkl2s1ecz8ay1iq3y3d].[:Measure Names]'>
            <groupfilter function='union' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.17qsjmp0vxkl2s1ecz8ay1iq3y3d].[sum:(&apos;income_$10,000 to $14,999&apos;, &apos;sum&apos;):qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.17qsjmp0vxkl2s1ecz8ay1iq3y3d].[sum:(&apos;income_$15,000 to $24,999&apos;, &apos;sum&apos;):qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.17qsjmp0vxkl2s1ecz8ay1iq3y3d].[sum:(&apos;income_$25,000 to $34,999&apos;, &apos;sum&apos;):qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.17qsjmp0vxkl2s1ecz8ay1iq3y3d].[sum:(&apos;income_$35,000 to $49,999&apos;, &apos;sum&apos;):qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.17qsjmp0vxkl2s1ecz8ay1iq3y3d].[sum:(&apos;income_$50,000 to $74,999&apos;, &apos;sum&apos;):qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.17qsjmp0vxkl2s1ecz8ay1iq3y3d].[sum:(&apos;income_$75,000 to $99,999&apos;, &apos;sum&apos;):qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.17qsjmp0vxkl2s1ecz8ay1iq3y3d].[sum:(&apos;income_$100,000 to $149,999&apos;, &apos;sum&apos;):qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.17qsjmp0vxkl2s1ecz8ay1iq3y3d].[sum:(&apos;income_$150,000 to $199,999&apos;, &apos;sum&apos;):qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.17qsjmp0vxkl2s1ecz8ay1iq3y3d].[sum:(&apos;income_$200,000 or more&apos;, &apos;sum&apos;):qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.17qsjmp0vxkl2s1ecz8ay1iq3y3d].[sum:(&apos;less than $10,000&apos;, &apos;sum&apos;):qk]&quot;' />
            </groupfilter>
          </filter>
          <manual-sort column='[federated.17qsjmp0vxkl2s1ecz8ay1iq3y3d].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[federated.17qsjmp0vxkl2s1ecz8ay1iq3y3d].[sum:(&apos;less than $10,000&apos;, &apos;sum&apos;):qk]&quot;</bucket>
              <bucket>&quot;[federated.17qsjmp0vxkl2s1ecz8ay1iq3y3d].[sum:(&apos;income_$10,000 to $14,999&apos;, &apos;sum&apos;):qk]&quot;</bucket>
              <bucket>&quot;[federated.17qsjmp0vxkl2s1ecz8ay1iq3y3d].[sum:(&apos;income_$15,000 to $24,999&apos;, &apos;sum&apos;):qk]&quot;</bucket>
              <bucket>&quot;[federated.17qsjmp0vxkl2s1ecz8ay1iq3y3d].[sum:(&apos;income_$25,000 to $34,999&apos;, &apos;sum&apos;):qk]&quot;</bucket>
              <bucket>&quot;[federated.17qsjmp0vxkl2s1ecz8ay1iq3y3d].[sum:(&apos;income_$35,000 to $49,999&apos;, &apos;sum&apos;):qk]&quot;</bucket>
              <bucket>&quot;[federated.17qsjmp0vxkl2s1ecz8ay1iq3y3d].[sum:(&apos;income_$50,000 to $74,999&apos;, &apos;sum&apos;):qk]&quot;</bucket>
              <bucket>&quot;[federated.17qsjmp0vxkl2s1ecz8ay1iq3y3d].[sum:(&apos;income_$75,000 to $99,999&apos;, &apos;sum&apos;):qk]&quot;</bucket>
              <bucket>&quot;[federated.17qsjmp0vxkl2s1ecz8ay1iq3y3d].[sum:death_rate:qk]&quot;</bucket>
            </dictionary>
          </manual-sort>
          <computed-sort column='[federated.17qsjmp0vxkl2s1ecz8ay1iq3y3d].[none:county:nk]' direction='DESC' using='[federated.17qsjmp0vxkl2s1ecz8ay1iq3y3d].[sum:death_rate:qk]' />
          <filter class='quantitative' column='[federated.17qsjmp0vxkl2s1ecz8ay1iq3y3d].[sum:death_rate:qk]' included-values='in-range'>
            <min>25.649999999999999</min>
            <max>32.0</max>
          </filter>
          <slices>
            <column>[federated.17qsjmp0vxkl2s1ecz8ay1iq3y3d].[sum:death_rate:qk]</column>
            <column>[federated.17qsjmp0vxkl2s1ecz8ay1iq3y3d].[:Measure Names]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='text-format' field='[federated.17qsjmp0vxkl2s1ecz8ay1iq3y3d].[sum:death_rate:qk]' value='N' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.17qsjmp0vxkl2s1ecz8ay1iq3y3d].[:Measure Names]' />
              <text column='[federated.17qsjmp0vxkl2s1ecz8ay1iq3y3d].[Multiple Values]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([federated.17qsjmp0vxkl2s1ecz8ay1iq3y3d].[none:county:nk] * [federated.17qsjmp0vxkl2s1ecz8ay1iq3y3d].[Multiple Values])</rows>
        <cols>([federated.17qsjmp0vxkl2s1ecz8ay1iq3y3d].[:Measure Names] / [federated.17qsjmp0vxkl2s1ecz8ay1iq3y3d].[:Measure Names])</cols>
      </table>
      <simple-id uuid='{DD802D4B-57AC-4098-A71D-B6941B150570}' />
    </worksheet>
  </worksheets>
  <windows source-height='37'>
    <window class='worksheet' name='Sheet 1'>
      <cards>
        <edge name='left'>
          <strip size='200'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='38'>
            <card type='columns' />
          </strip>
          <strip size='38'>
            <card type='rows' />
          </strip>
          <strip size='38'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card param='[federated.17qsjmp0vxkl2s1ecz8ay1iq3y3d].[sum:death_rate:qk]' show-domain='false' show-null-ctrls='false' type='filter' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <zoom type='fit-height' />
        <highlight>
          <color-one-way>
            <field>[federated.17qsjmp0vxkl2s1ecz8ay1iq3y3d].[:Measure Names]</field>
            <field>[federated.17qsjmp0vxkl2s1ecz8ay1iq3y3d].[none:county:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{38ED846B-95D5-4843-B773-A1F775EB15C2}' />
    </window>
    <window class='worksheet' name='high_death'>
      <cards>
        <edge name='left'>
          <strip size='200'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='38'>
            <card type='columns' />
          </strip>
          <strip size='38'>
            <card type='rows' />
          </strip>
          <strip size='38'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='100'>
            <card param='[federated.17qsjmp0vxkl2s1ecz8ay1iq3y3d].[sum:death_rate:qk]' show-domain='false' show-null-ctrls='false' type='filter' />
            <card pane-specification-id='0' param='[federated.17qsjmp0vxkl2s1ecz8ay1iq3y3d].[:Measure Names]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <zoom type='fit-width' />
        <highlight>
          <color-one-way>
            <field>[federated.17qsjmp0vxkl2s1ecz8ay1iq3y3d].[:Measure Names]</field>
            <field>[federated.17qsjmp0vxkl2s1ecz8ay1iq3y3d].[none:county:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{076ECEED-8A72-4E4B-8DE6-E5343B2CED90}' />
    </window>
    <window class='worksheet' maximized='true' name='Income - 10-49k'>
      <cards>
        <edge name='left'>
          <strip size='200'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='38'>
            <card type='columns' />
          </strip>
          <strip size='38'>
            <card type='rows' />
          </strip>
          <strip size='38'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='100'>
            <card param='[federated.17qsjmp0vxkl2s1ecz8ay1iq3y3d].[sum:death_rate:qk]' show-domain='false' show-null-ctrls='false' type='filter' />
            <card pane-specification-id='0' param='[federated.17qsjmp0vxkl2s1ecz8ay1iq3y3d].[:Measure Names]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <zoom type='fit-height' />
        <highlight>
          <color-one-way>
            <field>[federated.17qsjmp0vxkl2s1ecz8ay1iq3y3d].[:Measure Names]</field>
            <field>[federated.17qsjmp0vxkl2s1ecz8ay1iq3y3d].[none:county:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{CE3AC5B4-A642-4D83-9138-436661688429}' />
    </window>
    <window class='worksheet' name='Income 50-200k'>
      <cards>
        <edge name='left'>
          <strip size='200'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='38'>
            <card type='columns' />
          </strip>
          <strip size='38'>
            <card type='rows' />
          </strip>
          <strip size='38'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='100'>
            <card param='[federated.17qsjmp0vxkl2s1ecz8ay1iq3y3d].[sum:death_rate:qk]' show-domain='false' show-null-ctrls='false' type='filter' />
            <card pane-specification-id='0' param='[federated.17qsjmp0vxkl2s1ecz8ay1iq3y3d].[:Measure Names]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <zoom type='fit-height' />
        <highlight>
          <color-one-way>
            <field>[federated.17qsjmp0vxkl2s1ecz8ay1iq3y3d].[:Measure Names]</field>
            <field>[federated.17qsjmp0vxkl2s1ecz8ay1iq3y3d].[none:county:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{1ED09D2C-3E53-48E6-B744-20F24BFCB2CE}' />
    </window>
    <window class='worksheet' name='Income 50-200k (2)'>
      <cards>
        <edge name='left'>
          <strip size='200'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='38'>
            <card type='columns' />
          </strip>
          <strip size='38'>
            <card type='rows' />
          </strip>
          <strip size='38'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='100'>
            <card param='[federated.17qsjmp0vxkl2s1ecz8ay1iq3y3d].[sum:death_rate:qk]' show-domain='false' show-null-ctrls='false' type='filter' />
            <card pane-specification-id='0' param='[federated.17qsjmp0vxkl2s1ecz8ay1iq3y3d].[:Measure Names]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <zoom type='fit-height' />
        <highlight>
          <color-one-way>
            <field>[federated.17qsjmp0vxkl2s1ecz8ay1iq3y3d].[:Measure Names]</field>
            <field>[federated.17qsjmp0vxkl2s1ecz8ay1iq3y3d].[none:county:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{51A0C754-5ED7-45CF-B051-7E6D91D5CD2A}' />
    </window>
  </windows>
  <thumbnails>
    <thumbnail height='192' name='Income - 10-49k' width='192'>
      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
      9LY9ZgBCCEqxBZw2C1JT/3PdcDvdAIQQ+CNJ7HY7XS3uF7JO8jIZQCYZxONUMTsGkaT1+TPP
      ZADbhyCfy+P2ejFJ0qcWwr7IYdAnF3++yGHQ51kIe8nDoBLetVYlX/GKTeQlNoBnRwjBrVu3
      CAaDvP766/T29nL58mXC4TBvvPEGV65c4ejRo6t5LoEAX/7yl+ns7NxusbeMQqHApUuXMAyD
      b3zjG6TTaa5du4bNZqOjo4NwOMxbb71FKpXi448/5jd+4ze2W+RNo1Ao8KMf/YjXXnuN48eP
      MzMzw+TkJH19fei6TiAQ4NSpU0xOTq6Ggbdb4I3y6DTjYfy3Uqkgy3L971qthq7rWK1WSqUS
      hUKBr33taywuLm6j5JvPk1Muj8eDx+Oph49bWlp47bXXkGWZmzdvomka2WyWubk5PB7Pdoi8
      ZRQKBVwuV30DVSQS4dSpUywsLNTvCY/HwxtvvIHFYmkMAxBC4HA4OHPmDH6/HyEETU1NHDhw
      gEwmw9e//nUikQi1Wo10Ov1C82ZeBE8aQLlc5tSpU5TLZXRdJxqNsrCwwDvvvENLSwtvvvkm
      N2/epFQqMTY2RrW6/lTjlxWn08k3vvENotEoAKdPnyYUCmGz2XA6nRw/fpzp6Wlu3rzJV77y
      lZfZCX6cJ53gR5OghBBMTEwQj8fZs2cPtVqNQqFAqVTi1KlT3Lhxg/379+N0OpmYmODcuXN1
      p6oRnOAnE8LK5TJXr15l165dxONxdu/ezb179+jq6mLPnj3cuXOHc+fOYbPZCIfD9K4j1fhp
      sm0F69FFtVrlypUrHDhwgMXFRUZGRrh9+zZvvPEG8/PzpFIpjhw5ws2bN/F4PDvXAF5FgV5F
      geD5o0AbmgIlo2FqOoTC4cdeX3tZXSeXKwCQiAbqqRCfRyGXZ+0doKsIITAWP6T68/+V2q0/
      QRiNlduzXoLxPH/wt7f49/9trJ4T9EVBL89TWvq/KQf+HUJf/57oDZlxMZfB0d5LJptF0qqk
      cwU8bbswlCL5VIxczUSL20Q8laN7oJ9KpobP5ySayDM8fJRqPsmdqRCelg7MhkKTzYJqM+Ff
      jOHyekj5Z+k6OIxV6LgtYO94YnVTLWFJP8D23r9Ae/C36NH7yL2vbWQoDcHPx5b5J988TSpX
      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
      IzhwlN+slgAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='Income 50-200k' width='192'>
      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
      og5dNf8AAAAASUVORK5CYII=
    </thumbnail>
    <thumbnail height='192' name='Income 50-200k (2)' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Sheet 1' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='high_death' width='192'>
      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
    </thumbnail>
  </thumbnails>
</workbook>
